// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `DifferentialRobot.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __DifferentialRobot_h__
#define __DifferentialRobot_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <GenericBase.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompDifferentialRobot
{

class DifferentialRobot;
class DifferentialRobotPrx;

}

namespace RoboCompDifferentialRobot
{

struct TMechParams
{
    int wheelRadius;
    int axisLength;
    int encoderSteps;
    int gearRatio;
    float temp;
    float maxVelAdv;
    float maxVelRot;
    ::std::string device;
    ::std::string handler;

    std::tuple<const int&, const int&, const int&, const int&, const float&, const float&, const float&, const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(wheelRadius, axisLength, encoderSteps, gearRatio, temp, maxVelAdv, maxVelRot, device, handler);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompDifferentialRobot
{

class DifferentialRobot : public virtual ::Ice::Object
{
public:

    using ProxyType = DifferentialRobotPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    virtual void getBaseState(::RoboCompGenericBase::TBaseState&, const ::Ice::Current&) = 0;
    bool _iceD_getBaseState(::IceInternal::Incoming&, const ::Ice::Current&);

    struct GetBasePoseResult
    {
        int x;
        int z;
        float alpha;
    };

    virtual void getBasePose(int&, int&, float&, const ::Ice::Current&) = 0;
    bool _iceD_getBasePose(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setSpeedBase(float, float, const ::Ice::Current&) = 0;
    bool _iceD_setSpeedBase(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void stopBase(const ::Ice::Current&) = 0;
    bool _iceD_stopBase(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void resetOdometer(const ::Ice::Current&) = 0;
    bool _iceD_resetOdometer(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setOdometer(::RoboCompGenericBase::TBaseState, const ::Ice::Current&) = 0;
    bool _iceD_setOdometer(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setOdometerPose(int, int, float, const ::Ice::Current&) = 0;
    bool _iceD_setOdometerPose(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void correctOdometer(int, int, float, const ::Ice::Current&) = 0;
    bool _iceD_correctOdometer(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

}

namespace RoboCompDifferentialRobot
{

class DifferentialRobotPrx : public virtual ::Ice::Proxy<DifferentialRobotPrx, ::Ice::ObjectPrx>
{
public:

    void getBaseState(::RoboCompGenericBase::TBaseState& iceP_state, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        iceP_state = _makePromiseOutgoing<::RoboCompGenericBase::TBaseState>(true, this, &RoboCompDifferentialRobot::DifferentialRobotPrx::_iceI_getBaseState, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getBaseStateAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompGenericBase::TBaseState>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompGenericBase::TBaseState, P>(false, this, &RoboCompDifferentialRobot::DifferentialRobotPrx::_iceI_getBaseState, context);
    }

    ::std::function<void()>
    getBaseStateAsync(::std::function<void(::RoboCompGenericBase::TBaseState)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompGenericBase::TBaseState>(response, ex, sent, this, &RoboCompDifferentialRobot::DifferentialRobotPrx::_iceI_getBaseState, context);
    }

    void _iceI_getBaseState(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompGenericBase::TBaseState>>&, const ::Ice::Context&);

    void getBasePose(int& iceP_x, int& iceP_z, float& iceP_alpha, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto result = _makePromiseOutgoing<::RoboCompDifferentialRobot::DifferentialRobot::GetBasePoseResult>(true, this, &RoboCompDifferentialRobot::DifferentialRobotPrx::_iceI_getBasePose, context).get();
        iceP_x = result.x;
        iceP_z = result.z;
        iceP_alpha = result.alpha;
    }

    template<template<typename> class P = ::std::promise>
    auto getBasePoseAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompDifferentialRobot::DifferentialRobot::GetBasePoseResult>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompDifferentialRobot::DifferentialRobot::GetBasePoseResult, P>(false, this, &RoboCompDifferentialRobot::DifferentialRobotPrx::_iceI_getBasePose, context);
    }

    ::std::function<void()>
    getBasePoseAsync(::std::function<void(int, int, float)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto responseCb = [response](::RoboCompDifferentialRobot::DifferentialRobot::GetBasePoseResult&& result)
        {
            response(result.x, result.z, result.alpha);
        };
        return _makeLamdaOutgoing<::RoboCompDifferentialRobot::DifferentialRobot::GetBasePoseResult>(responseCb, ex, sent, this, &RoboCompDifferentialRobot::DifferentialRobotPrx::_iceI_getBasePose, context);
    }

    void _iceI_getBasePose(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompDifferentialRobot::DifferentialRobot::GetBasePoseResult>>&, const ::Ice::Context&);

    void setSpeedBase(float iceP_adv, float iceP_rot, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompDifferentialRobot::DifferentialRobotPrx::_iceI_setSpeedBase, iceP_adv, iceP_rot, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setSpeedBaseAsync(float iceP_adv, float iceP_rot, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompDifferentialRobot::DifferentialRobotPrx::_iceI_setSpeedBase, iceP_adv, iceP_rot, context);
    }

    ::std::function<void()>
    setSpeedBaseAsync(float iceP_adv, float iceP_rot,
                      ::std::function<void()> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompDifferentialRobot::DifferentialRobotPrx::_iceI_setSpeedBase, iceP_adv, iceP_rot, context);
    }

    void _iceI_setSpeedBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, float, float, const ::Ice::Context&);

    void stopBase(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompDifferentialRobot::DifferentialRobotPrx::_iceI_stopBase, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto stopBaseAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompDifferentialRobot::DifferentialRobotPrx::_iceI_stopBase, context);
    }

    ::std::function<void()>
    stopBaseAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompDifferentialRobot::DifferentialRobotPrx::_iceI_stopBase, context);
    }

    void _iceI_stopBase(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);

    void resetOdometer(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompDifferentialRobot::DifferentialRobotPrx::_iceI_resetOdometer, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto resetOdometerAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompDifferentialRobot::DifferentialRobotPrx::_iceI_resetOdometer, context);
    }

    ::std::function<void()>
    resetOdometerAsync(::std::function<void()> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompDifferentialRobot::DifferentialRobotPrx::_iceI_resetOdometer, context);
    }

    void _iceI_resetOdometer(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);

    void setOdometer(const ::RoboCompGenericBase::TBaseState& iceP_state, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompDifferentialRobot::DifferentialRobotPrx::_iceI_setOdometer, iceP_state, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setOdometerAsync(const ::RoboCompGenericBase::TBaseState& iceP_state, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompDifferentialRobot::DifferentialRobotPrx::_iceI_setOdometer, iceP_state, context);
    }

    ::std::function<void()>
    setOdometerAsync(const ::RoboCompGenericBase::TBaseState& iceP_state,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompDifferentialRobot::DifferentialRobotPrx::_iceI_setOdometer, iceP_state, context);
    }

    void _iceI_setOdometer(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::RoboCompGenericBase::TBaseState&, const ::Ice::Context&);

    void setOdometerPose(int iceP_x, int iceP_z, float iceP_alpha, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompDifferentialRobot::DifferentialRobotPrx::_iceI_setOdometerPose, iceP_x, iceP_z, iceP_alpha, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setOdometerPoseAsync(int iceP_x, int iceP_z, float iceP_alpha, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompDifferentialRobot::DifferentialRobotPrx::_iceI_setOdometerPose, iceP_x, iceP_z, iceP_alpha, context);
    }

    ::std::function<void()>
    setOdometerPoseAsync(int iceP_x, int iceP_z, float iceP_alpha,
                         ::std::function<void()> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompDifferentialRobot::DifferentialRobotPrx::_iceI_setOdometerPose, iceP_x, iceP_z, iceP_alpha, context);
    }

    void _iceI_setOdometerPose(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, int, int, float, const ::Ice::Context&);

    void correctOdometer(int iceP_x, int iceP_z, float iceP_alpha, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompDifferentialRobot::DifferentialRobotPrx::_iceI_correctOdometer, iceP_x, iceP_z, iceP_alpha, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto correctOdometerAsync(int iceP_x, int iceP_z, float iceP_alpha, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompDifferentialRobot::DifferentialRobotPrx::_iceI_correctOdometer, iceP_x, iceP_z, iceP_alpha, context);
    }

    ::std::function<void()>
    correctOdometerAsync(int iceP_x, int iceP_z, float iceP_alpha,
                         ::std::function<void()> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompDifferentialRobot::DifferentialRobotPrx::_iceI_correctOdometer, iceP_x, iceP_z, iceP_alpha, context);
    }

    void _iceI_correctOdometer(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, int, int, float, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    DifferentialRobotPrx() = default;
    friend ::std::shared_ptr<DifferentialRobotPrx> IceInternal::createProxy<DifferentialRobotPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

}

namespace Ice
{

template<>
struct StreamableTraits<::RoboCompDifferentialRobot::TMechParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 30;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompDifferentialRobot::TMechParams, S>
{
    static void read(S* istr, ::RoboCompDifferentialRobot::TMechParams& v)
    {
        istr->readAll(v.wheelRadius, v.axisLength, v.encoderSteps, v.gearRatio, v.temp, v.maxVelAdv, v.maxVelRot, v.device, v.handler);
    }
};

}

namespace RoboCompDifferentialRobot
{

using DifferentialRobotPtr = ::std::shared_ptr<DifferentialRobot>;
using DifferentialRobotPrxPtr = ::std::shared_ptr<DifferentialRobotPrx>;

}

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompDifferentialRobot
{

class DifferentialRobot;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompDifferentialRobot::DifferentialRobot>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompDifferentialRobot::DifferentialRobot*);

}

}

namespace RoboCompDifferentialRobot
{

class DifferentialRobot;
::Ice::Object* upCast(::RoboCompDifferentialRobot::DifferentialRobot*);
typedef ::IceInternal::Handle< ::RoboCompDifferentialRobot::DifferentialRobot> DifferentialRobotPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompDifferentialRobot::DifferentialRobot> DifferentialRobotPrx;
typedef DifferentialRobotPrx DifferentialRobotPrxPtr;
void _icePatchObjectPtr(DifferentialRobotPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompDifferentialRobot
{

struct TMechParams
{
    ::Ice::Int wheelRadius;
    ::Ice::Int axisLength;
    ::Ice::Int encoderSteps;
    ::Ice::Int gearRatio;
    ::Ice::Float temp;
    ::Ice::Float maxVelAdv;
    ::Ice::Float maxVelRot;
    ::std::string device;
    ::std::string handler;
};

}

namespace RoboCompDifferentialRobot
{

class Callback_DifferentialRobot_getBaseState_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DifferentialRobot_getBaseState_Base> Callback_DifferentialRobot_getBaseStatePtr;

class Callback_DifferentialRobot_getBasePose_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DifferentialRobot_getBasePose_Base> Callback_DifferentialRobot_getBasePosePtr;

class Callback_DifferentialRobot_setSpeedBase_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DifferentialRobot_setSpeedBase_Base> Callback_DifferentialRobot_setSpeedBasePtr;

class Callback_DifferentialRobot_stopBase_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DifferentialRobot_stopBase_Base> Callback_DifferentialRobot_stopBasePtr;

class Callback_DifferentialRobot_resetOdometer_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DifferentialRobot_resetOdometer_Base> Callback_DifferentialRobot_resetOdometerPtr;

class Callback_DifferentialRobot_setOdometer_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DifferentialRobot_setOdometer_Base> Callback_DifferentialRobot_setOdometerPtr;

class Callback_DifferentialRobot_setOdometerPose_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DifferentialRobot_setOdometerPose_Base> Callback_DifferentialRobot_setOdometerPosePtr;

class Callback_DifferentialRobot_correctOdometer_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_DifferentialRobot_correctOdometer_Base> Callback_DifferentialRobot_correctOdometerPtr;

}

namespace IceProxy
{

namespace RoboCompDifferentialRobot
{

class DifferentialRobot : public virtual ::Ice::Proxy<DifferentialRobot, ::IceProxy::Ice::Object>
{
public:

    void getBaseState(::RoboCompGenericBase::TBaseState& iceP_state, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getBaseState(iceP_state, _iceI_begin_getBaseState(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getBaseState(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getBaseState(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBaseState(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getBaseState(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getBaseState(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getBaseState(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getBaseState(const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_getBaseStatePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getBaseState(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getBaseState(const ::Ice::Context& context, const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_getBaseStatePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getBaseState(context, del, cookie);
    }

    void end_getBaseState(::RoboCompGenericBase::TBaseState& iceP_state, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getBaseState(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getBasePose(::Ice::Int& iceP_x, ::Ice::Int& iceP_z, ::Ice::Float& iceP_alpha, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getBasePose(iceP_x, iceP_z, iceP_alpha, _iceI_begin_getBasePose(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getBasePose(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getBasePose(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getBasePose(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getBasePose(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getBasePose(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getBasePose(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getBasePose(const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_getBasePosePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getBasePose(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getBasePose(const ::Ice::Context& context, const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_getBasePosePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getBasePose(context, del, cookie);
    }

    void end_getBasePose(::Ice::Int& iceP_x, ::Ice::Int& iceP_z, ::Ice::Float& iceP_alpha, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getBasePose(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setSpeedBase(::Ice::Float iceP_adv, ::Ice::Float iceP_rot, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setSpeedBase(_iceI_begin_setSpeedBase(iceP_adv, iceP_rot, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setSpeedBase(::Ice::Float iceP_adv, ::Ice::Float iceP_rot, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setSpeedBase(iceP_adv, iceP_rot, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setSpeedBase(::Ice::Float iceP_adv, ::Ice::Float iceP_rot, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setSpeedBase(iceP_adv, iceP_rot, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setSpeedBase(::Ice::Float iceP_adv, ::Ice::Float iceP_rot, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setSpeedBase(iceP_adv, iceP_rot, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setSpeedBase(::Ice::Float iceP_adv, ::Ice::Float iceP_rot, const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_setSpeedBasePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setSpeedBase(iceP_adv, iceP_rot, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setSpeedBase(::Ice::Float iceP_adv, ::Ice::Float iceP_rot, const ::Ice::Context& context, const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_setSpeedBasePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setSpeedBase(iceP_adv, iceP_rot, context, del, cookie);
    }

    void end_setSpeedBase(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setSpeedBase(::Ice::Float, ::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void stopBase(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_stopBase(_iceI_begin_stopBase(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_stopBase(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_stopBase(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stopBase(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopBase(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_stopBase(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopBase(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_stopBase(const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_stopBasePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopBase(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_stopBase(const ::Ice::Context& context, const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_stopBasePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopBase(context, del, cookie);
    }

    void end_stopBase(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_stopBase(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void resetOdometer(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_resetOdometer(_iceI_begin_resetOdometer(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_resetOdometer(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_resetOdometer(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resetOdometer(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_resetOdometer(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_resetOdometer(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_resetOdometer(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_resetOdometer(const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_resetOdometerPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_resetOdometer(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_resetOdometer(const ::Ice::Context& context, const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_resetOdometerPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_resetOdometer(context, del, cookie);
    }

    void end_resetOdometer(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_resetOdometer(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setOdometer(const ::RoboCompGenericBase::TBaseState& iceP_state, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setOdometer(_iceI_begin_setOdometer(iceP_state, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setOdometer(const ::RoboCompGenericBase::TBaseState& iceP_state, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setOdometer(iceP_state, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setOdometer(const ::RoboCompGenericBase::TBaseState& iceP_state, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setOdometer(iceP_state, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setOdometer(const ::RoboCompGenericBase::TBaseState& iceP_state, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setOdometer(iceP_state, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setOdometer(const ::RoboCompGenericBase::TBaseState& iceP_state, const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_setOdometerPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setOdometer(iceP_state, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setOdometer(const ::RoboCompGenericBase::TBaseState& iceP_state, const ::Ice::Context& context, const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_setOdometerPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setOdometer(iceP_state, context, del, cookie);
    }

    void end_setOdometer(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setOdometer(const ::RoboCompGenericBase::TBaseState&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setOdometerPose(::Ice::Int iceP_x, ::Ice::Int iceP_z, ::Ice::Float iceP_alpha, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setOdometerPose(_iceI_begin_setOdometerPose(iceP_x, iceP_z, iceP_alpha, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setOdometerPose(::Ice::Int iceP_x, ::Ice::Int iceP_z, ::Ice::Float iceP_alpha, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setOdometerPose(iceP_x, iceP_z, iceP_alpha, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setOdometerPose(::Ice::Int iceP_x, ::Ice::Int iceP_z, ::Ice::Float iceP_alpha, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setOdometerPose(iceP_x, iceP_z, iceP_alpha, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setOdometerPose(::Ice::Int iceP_x, ::Ice::Int iceP_z, ::Ice::Float iceP_alpha, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setOdometerPose(iceP_x, iceP_z, iceP_alpha, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setOdometerPose(::Ice::Int iceP_x, ::Ice::Int iceP_z, ::Ice::Float iceP_alpha, const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_setOdometerPosePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setOdometerPose(iceP_x, iceP_z, iceP_alpha, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setOdometerPose(::Ice::Int iceP_x, ::Ice::Int iceP_z, ::Ice::Float iceP_alpha, const ::Ice::Context& context, const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_setOdometerPosePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setOdometerPose(iceP_x, iceP_z, iceP_alpha, context, del, cookie);
    }

    void end_setOdometerPose(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setOdometerPose(::Ice::Int, ::Ice::Int, ::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void correctOdometer(::Ice::Int iceP_x, ::Ice::Int iceP_z, ::Ice::Float iceP_alpha, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_correctOdometer(_iceI_begin_correctOdometer(iceP_x, iceP_z, iceP_alpha, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_correctOdometer(::Ice::Int iceP_x, ::Ice::Int iceP_z, ::Ice::Float iceP_alpha, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_correctOdometer(iceP_x, iceP_z, iceP_alpha, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_correctOdometer(::Ice::Int iceP_x, ::Ice::Int iceP_z, ::Ice::Float iceP_alpha, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_correctOdometer(iceP_x, iceP_z, iceP_alpha, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_correctOdometer(::Ice::Int iceP_x, ::Ice::Int iceP_z, ::Ice::Float iceP_alpha, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_correctOdometer(iceP_x, iceP_z, iceP_alpha, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_correctOdometer(::Ice::Int iceP_x, ::Ice::Int iceP_z, ::Ice::Float iceP_alpha, const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_correctOdometerPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_correctOdometer(iceP_x, iceP_z, iceP_alpha, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_correctOdometer(::Ice::Int iceP_x, ::Ice::Int iceP_z, ::Ice::Float iceP_alpha, const ::Ice::Context& context, const ::RoboCompDifferentialRobot::Callback_DifferentialRobot_correctOdometerPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_correctOdometer(iceP_x, iceP_z, iceP_alpha, context, del, cookie);
    }

    void end_correctOdometer(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_correctOdometer(::Ice::Int, ::Ice::Int, ::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

}

}

namespace RoboCompDifferentialRobot
{

class DifferentialRobot : public virtual ::Ice::Object
{
public:

    typedef DifferentialRobotPrx ProxyType;
    typedef DifferentialRobotPtr PointerType;

    virtual ~DifferentialRobot();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual void getBaseState(::RoboCompGenericBase::TBaseState&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getBaseState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getBasePose(::Ice::Int&, ::Ice::Int&, ::Ice::Float&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getBasePose(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setSpeedBase(::Ice::Float, ::Ice::Float, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_setSpeedBase(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void stopBase(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_stopBase(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void resetOdometer(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_resetOdometer(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setOdometer(const ::RoboCompGenericBase::TBaseState&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_setOdometer(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setOdometerPose(::Ice::Int, ::Ice::Int, ::Ice::Float, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_setOdometerPose(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void correctOdometer(::Ice::Int, ::Ice::Int, ::Ice::Float, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_correctOdometer(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const DifferentialRobot& lhs, const DifferentialRobot& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const DifferentialRobot& lhs, const DifferentialRobot& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

}

namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompDifferentialRobot::TMechParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 30;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompDifferentialRobot::TMechParams, S>
{
    static void write(S* ostr, const ::RoboCompDifferentialRobot::TMechParams& v)
    {
        ostr->write(v.wheelRadius);
        ostr->write(v.axisLength);
        ostr->write(v.encoderSteps);
        ostr->write(v.gearRatio);
        ostr->write(v.temp);
        ostr->write(v.maxVelAdv);
        ostr->write(v.maxVelRot);
        ostr->write(v.device);
        ostr->write(v.handler);
    }
};

template<typename S>
struct StreamReader< ::RoboCompDifferentialRobot::TMechParams, S>
{
    static void read(S* istr, ::RoboCompDifferentialRobot::TMechParams& v)
    {
        istr->read(v.wheelRadius);
        istr->read(v.axisLength);
        istr->read(v.encoderSteps);
        istr->read(v.gearRatio);
        istr->read(v.temp);
        istr->read(v.maxVelAdv);
        istr->read(v.maxVelRot);
        istr->read(v.device);
        istr->read(v.handler);
    }
};

}

namespace RoboCompDifferentialRobot
{

template<class T>
class CallbackNC_DifferentialRobot_getBaseState : public Callback_DifferentialRobot_getBaseState_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompGenericBase::TBaseState&);

    CallbackNC_DifferentialRobot_getBaseState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(result->getProxy());
        ::RoboCompGenericBase::TBaseState iceP_state;
        try
        {
            proxy->end_getBaseState(iceP_state, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_state);
        }
    }

private:

    Response _response;
};

template<class T> Callback_DifferentialRobot_getBaseStatePtr
newCallback_DifferentialRobot_getBaseState(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_getBaseState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_getBaseStatePtr
newCallback_DifferentialRobot_getBaseState(T* instance, void (T::*cb)(const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_getBaseState<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DifferentialRobot_getBaseState : public Callback_DifferentialRobot_getBaseState_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompGenericBase::TBaseState&, const CT&);

    Callback_DifferentialRobot_getBaseState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(result->getProxy());
        ::RoboCompGenericBase::TBaseState iceP_state;
        try
        {
            proxy->end_getBaseState(iceP_state, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_state, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_DifferentialRobot_getBaseStatePtr
newCallback_DifferentialRobot_getBaseState(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_getBaseState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_getBaseStatePtr
newCallback_DifferentialRobot_getBaseState(T* instance, void (T::*cb)(const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_getBaseState<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DifferentialRobot_getBasePose : public Callback_DifferentialRobot_getBasePose_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Int, ::Ice::Float);

    CallbackNC_DifferentialRobot_getBasePose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(result->getProxy());
        ::Ice::Int iceP_x;
        ::Ice::Int iceP_z;
        ::Ice::Float iceP_alpha;
        try
        {
            proxy->end_getBasePose(iceP_x, iceP_z, iceP_alpha, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_x, iceP_z, iceP_alpha);
        }
    }

private:

    Response _response;
};

template<class T> Callback_DifferentialRobot_getBasePosePtr
newCallback_DifferentialRobot_getBasePose(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Int, ::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_getBasePose<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_getBasePosePtr
newCallback_DifferentialRobot_getBasePose(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Int, ::Ice::Float), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_getBasePose<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_DifferentialRobot_getBasePose : public Callback_DifferentialRobot_getBasePose_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, ::Ice::Int, ::Ice::Float, const CT&);

    Callback_DifferentialRobot_getBasePose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(result->getProxy());
        ::Ice::Int iceP_x;
        ::Ice::Int iceP_z;
        ::Ice::Float iceP_alpha;
        try
        {
            proxy->end_getBasePose(iceP_x, iceP_z, iceP_alpha, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_x, iceP_z, iceP_alpha, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_DifferentialRobot_getBasePosePtr
newCallback_DifferentialRobot_getBasePose(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, ::Ice::Int, ::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_getBasePose<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_getBasePosePtr
newCallback_DifferentialRobot_getBasePose(T* instance, void (T::*cb)(::Ice::Int, ::Ice::Int, ::Ice::Float, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_getBasePose<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_DifferentialRobot_setSpeedBase : public Callback_DifferentialRobot_setSpeedBase_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DifferentialRobot_setSpeedBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setSpeedBase(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

private:

    Response _response;
};

template<class T> Callback_DifferentialRobot_setSpeedBasePtr
newCallback_DifferentialRobot_setSpeedBase(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_setSpeedBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_setSpeedBasePtr
newCallback_DifferentialRobot_setSpeedBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_setSpeedBase<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_setSpeedBasePtr
newCallback_DifferentialRobot_setSpeedBase(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_setSpeedBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_setSpeedBasePtr
newCallback_DifferentialRobot_setSpeedBase(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_setSpeedBase<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DifferentialRobot_setSpeedBase : public Callback_DifferentialRobot_setSpeedBase_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DifferentialRobot_setSpeedBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setSpeedBase(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_DifferentialRobot_setSpeedBasePtr
newCallback_DifferentialRobot_setSpeedBase(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_setSpeedBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_setSpeedBasePtr
newCallback_DifferentialRobot_setSpeedBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_setSpeedBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_setSpeedBasePtr
newCallback_DifferentialRobot_setSpeedBase(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_setSpeedBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_setSpeedBasePtr
newCallback_DifferentialRobot_setSpeedBase(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_setSpeedBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DifferentialRobot_stopBase : public Callback_DifferentialRobot_stopBase_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DifferentialRobot_stopBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_stopBase(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

private:

    Response _response;
};

template<class T> Callback_DifferentialRobot_stopBasePtr
newCallback_DifferentialRobot_stopBase(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_stopBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_stopBasePtr
newCallback_DifferentialRobot_stopBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_stopBase<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_stopBasePtr
newCallback_DifferentialRobot_stopBase(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_stopBase<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_stopBasePtr
newCallback_DifferentialRobot_stopBase(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_stopBase<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DifferentialRobot_stopBase : public Callback_DifferentialRobot_stopBase_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DifferentialRobot_stopBase(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_stopBase(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_DifferentialRobot_stopBasePtr
newCallback_DifferentialRobot_stopBase(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_stopBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_stopBasePtr
newCallback_DifferentialRobot_stopBase(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_stopBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_stopBasePtr
newCallback_DifferentialRobot_stopBase(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_stopBase<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_stopBasePtr
newCallback_DifferentialRobot_stopBase(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_stopBase<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DifferentialRobot_resetOdometer : public Callback_DifferentialRobot_resetOdometer_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DifferentialRobot_resetOdometer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_resetOdometer(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

private:

    Response _response;
};

template<class T> Callback_DifferentialRobot_resetOdometerPtr
newCallback_DifferentialRobot_resetOdometer(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_resetOdometer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_resetOdometerPtr
newCallback_DifferentialRobot_resetOdometer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_resetOdometer<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_resetOdometerPtr
newCallback_DifferentialRobot_resetOdometer(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_resetOdometer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_resetOdometerPtr
newCallback_DifferentialRobot_resetOdometer(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_resetOdometer<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DifferentialRobot_resetOdometer : public Callback_DifferentialRobot_resetOdometer_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DifferentialRobot_resetOdometer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_resetOdometer(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_DifferentialRobot_resetOdometerPtr
newCallback_DifferentialRobot_resetOdometer(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_resetOdometer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_resetOdometerPtr
newCallback_DifferentialRobot_resetOdometer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_resetOdometer<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_resetOdometerPtr
newCallback_DifferentialRobot_resetOdometer(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_resetOdometer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_resetOdometerPtr
newCallback_DifferentialRobot_resetOdometer(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_resetOdometer<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DifferentialRobot_setOdometer : public Callback_DifferentialRobot_setOdometer_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DifferentialRobot_setOdometer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setOdometer(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

private:

    Response _response;
};

template<class T> Callback_DifferentialRobot_setOdometerPtr
newCallback_DifferentialRobot_setOdometer(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_setOdometer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_setOdometerPtr
newCallback_DifferentialRobot_setOdometer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_setOdometer<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_setOdometerPtr
newCallback_DifferentialRobot_setOdometer(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_setOdometer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_setOdometerPtr
newCallback_DifferentialRobot_setOdometer(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_setOdometer<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DifferentialRobot_setOdometer : public Callback_DifferentialRobot_setOdometer_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DifferentialRobot_setOdometer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setOdometer(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_DifferentialRobot_setOdometerPtr
newCallback_DifferentialRobot_setOdometer(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_setOdometer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_setOdometerPtr
newCallback_DifferentialRobot_setOdometer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_setOdometer<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_setOdometerPtr
newCallback_DifferentialRobot_setOdometer(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_setOdometer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_setOdometerPtr
newCallback_DifferentialRobot_setOdometer(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_setOdometer<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DifferentialRobot_setOdometerPose : public Callback_DifferentialRobot_setOdometerPose_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DifferentialRobot_setOdometerPose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setOdometerPose(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

private:

    Response _response;
};

template<class T> Callback_DifferentialRobot_setOdometerPosePtr
newCallback_DifferentialRobot_setOdometerPose(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_setOdometerPose<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_setOdometerPosePtr
newCallback_DifferentialRobot_setOdometerPose(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_setOdometerPose<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_setOdometerPosePtr
newCallback_DifferentialRobot_setOdometerPose(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_setOdometerPose<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_setOdometerPosePtr
newCallback_DifferentialRobot_setOdometerPose(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_setOdometerPose<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DifferentialRobot_setOdometerPose : public Callback_DifferentialRobot_setOdometerPose_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DifferentialRobot_setOdometerPose(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setOdometerPose(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_DifferentialRobot_setOdometerPosePtr
newCallback_DifferentialRobot_setOdometerPose(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_setOdometerPose<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_setOdometerPosePtr
newCallback_DifferentialRobot_setOdometerPose(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_setOdometerPose<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_setOdometerPosePtr
newCallback_DifferentialRobot_setOdometerPose(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_setOdometerPose<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_setOdometerPosePtr
newCallback_DifferentialRobot_setOdometerPose(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_setOdometerPose<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_DifferentialRobot_correctOdometer : public Callback_DifferentialRobot_correctOdometer_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_DifferentialRobot_correctOdometer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_correctOdometer(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

private:

    Response _response;
};

template<class T> Callback_DifferentialRobot_correctOdometerPtr
newCallback_DifferentialRobot_correctOdometer(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_correctOdometer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_correctOdometerPtr
newCallback_DifferentialRobot_correctOdometer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_correctOdometer<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_correctOdometerPtr
newCallback_DifferentialRobot_correctOdometer(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_correctOdometer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_DifferentialRobot_correctOdometerPtr
newCallback_DifferentialRobot_correctOdometer(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_DifferentialRobot_correctOdometer<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_DifferentialRobot_correctOdometer : public Callback_DifferentialRobot_correctOdometer_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_DifferentialRobot_correctOdometer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompDifferentialRobot::DifferentialRobotPrx proxy = ::RoboCompDifferentialRobot::DifferentialRobotPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_correctOdometer(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_DifferentialRobot_correctOdometerPtr
newCallback_DifferentialRobot_correctOdometer(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_correctOdometer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_correctOdometerPtr
newCallback_DifferentialRobot_correctOdometer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_correctOdometer<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_correctOdometerPtr
newCallback_DifferentialRobot_correctOdometer(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_correctOdometer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_DifferentialRobot_correctOdometerPtr
newCallback_DifferentialRobot_correctOdometer(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_DifferentialRobot_correctOdometer<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
